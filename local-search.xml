<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>elastic search简介</title>
    <link href="/2022/11/18/ES/"/>
    <url>/2022/11/18/ES/</url>
    
    <content type="html"><![CDATA[<h1 id="Elastic-Search"><a href="#Elastic-Search" class="headerlink" title="Elastic Search"></a>Elastic Search</h1><h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h2><h3 id="es"><a href="#es" class="headerlink" title="es"></a>es</h3><ol><li><p>elastic search是用于存储、搜索的项目</p><p>kibana是展示数据的项目</p><p>kibana结合es可以<strong>实时地对数据进行搜索、分析和可视化。</strong></p></li><li><p>es是一个开源的高扩展的分布式全文搜索引擎，是整个elastic stack技术栈的核心。</p><p>它可以近乎实时地存储、检索数据。</p></li><li><p>es的全文搜索的原理是倒排索引。 </p></li><li><p>Lucene是Apache软件基金会Jakarta项目组的一个子项目，提供了一个简单却强大的应用程式接口，能够做全文索引和搜寻。</p><p>但Lucene只是一个<strong>提供全文搜索功能类库</strong>的核心工具包，而真正使用它还需要一个<strong>完善的服务框架</strong>搭建起来进行应用。</p><p>这里的完善的服务框架便是说的es和solr。</p></li><li><p>es是基于Java开发的。</p></li></ol><h3 id="全文搜索"><a href="#全文搜索" class="headerlink" title="全文搜索"></a>全文搜索</h3><ol><li><p>Google，百度类的网站搜索，它们都是根据网页中的关键字生成索引，我们在搜索的时候输入关键字，它们会将该关键字即索引匹配到的所有网页返回；还有常见的项目中应用日志的搜索等等。对于这些非结构化的数据文本，关系型数据库搜索不是能很好的支持。</p></li><li><p>一般的传统关系型数据库，都不会用来进行全文检索，一般也没有人用关系型数据库存储文本字段。进行全文检索需要扫描整个表，如果数据量大的话即使对SQL语法进行优化，也收效甚微。</p></li><li><p>使用ES或Solr这种全文检索引擎：</p><ul><li>搜索的数据对象是大量的非结构化的文本数据。</li><li>文件记录量达到数十万或数百万甚至更多</li><li>对高度相关的搜索结果的有特殊需求，但是没有可用的关系数据库可以满足。</li></ul></li><li><p>全文检索的工作原理</p><ul><li><p>分词</p></li><li><p>对词进行处理，缩减为词根等等</p></li><li><p>根据TF-IDF算法对每一个词计算频率，分别是这个词在当前文档中出现的次数，以及这个词在整个数据集中在哪些文档中出现了</p></li><li><p>根据上一步计算出的两个指标，对词进行排序，这个就是构建倒排索引</p><p>TF-IDF算法是根据词在单个文档中出现的次数和在全部文档中出现的次数。</p></li><li><p>检索程序就根据事先建立的索引进行查找</p></li></ul></li></ol><h2 id="二、入门"><a href="#二、入门" class="headerlink" title="二、入门"></a>二、入门</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ol><li><p>windows版的es压缩包，解压即安装完成。</p></li><li><p>目录：</p><table><thead><tr><th>目录</th><th>含义</th></tr></thead><tbody><tr><td>bin</td><td>可执行文件目录</td></tr><tr><td>config</td><td>配置目录</td></tr><tr><td>jdk</td><td>内置jdk</td></tr><tr><td>lib</td><td>类库</td></tr><tr><td>logs</td><td>日志目录</td></tr><tr><td>modules</td><td>模块目录</td></tr><tr><td>plugins</td><td>插件目录</td></tr></tbody></table></li><li><p>bin目录下的elasticsearch.bat即是windows版本的es服务启动文件。</p></li><li><p>9300端口为elasticsearch集群间组件的通信端口，9200端口为浏览器访问的http协议的restful端口。</p></li><li><p>路径是对资源的定位，方法是对资源的操作。</p></li></ol><h3 id="RESTful"><a href="#RESTful" class="headerlink" title="RESTful"></a>RESTful</h3><ol><li><p>ES的对数据的操作是符合RESTful风格的API</p><p>ES的<strong>请求和响应都是JSON字符串。</strong></p></li><li><p>对RESTful的简单理解：</p><p>如果想要访问互联网上的资源，就必须向资源所在的服务器发出请求，请求体中必须包含资源的网络路径，以及对资源的操作。</p><p>REST样式的API的响应大多是JSON格式的字符串。网络中是传不了对象的，必须要进行序列化。</p></li><li><p>HTTP 1.1标准中没有规定GET方法是否可以有请求体，因此GET方法也可以带有请求体，完全符合标准。ES中就是用GET方法的请求体传递搜索条件，为了兼容性考虑，ES也接收POST方法+请求体的搜索方式。</p></li></ol><h3 id="数据格式"><a href="#数据格式" class="headerlink" title="数据格式"></a>数据格式</h3><ol><li><p>ElasticSearch是面向文档型数据库，一条数据在这里就是一个文档。</p></li><li><p>与MySQL对比的话，如下</p><figure class="highlight pgsql"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">index</span>    <span class="hljs-keyword">type</span>  document fields<br><span class="hljs-keyword">database</span> <span class="hljs-keyword">table</span> <span class="hljs-keyword">row</span>      <span class="hljs-keyword">column</span><br></code></pre></td></tr></table></figure><p>这里type的概念被弱化，ES6.X中，一个index下已经只能包含一个Type，而不是像MySQL一样，一个数据里有多张数据表。而到ES7.X中，Type的概念已经被删除了。</p></li><li><p>全文搜索引擎，不管是ES还是solr都会进行分词；对词进行语法优化；根据TF-IDF算法，为词建立倒排索引</p><p>这里并没有表的概念。</p></li></ol><h2 id="三、基本使用"><a href="#三、基本使用" class="headerlink" title="三、基本使用"></a>三、基本使用</h2><h3 id="索引操作"><a href="#索引操作" class="headerlink" title="索引操作"></a>索引操作</h3><h4 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h4><ol><li><p>对比关系型数据库，创建索引就等同于创建数据库。</p><p>在postman中，向ES服务发送<code>PUT</code>请求：<a href="http://localhost:9200/shopping">http://localhost:9200/shopping</a></p></li><li><p><code>PUT localhost:9200/shopping</code></p><p>response:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>    <span class="hljs-attr">&quot;acknowledged&quot;</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">&quot;shards_acknowledged&quot;</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">&quot;index&quot;</span>: <span class="hljs-string">&quot;shopping&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p> “acknowledged”: true 表示创建index成功</p><p>PUT具有幂等性，意味着只要发送同样的请求，结果一样，所以这个时候如果再发送一次请求，就会提示index已存在。</p><p>POST没有幂等性，两次操作可能结果不一样，所以如果用POST创建索引，那么可能创建两个名称一样的索引（两次创建索引都会成功），这是不允许的。</p><p><strong>不能用POST方式来创建索引。</strong></p></li></ol><h4 id="获取索引信息"><a href="#获取索引信息" class="headerlink" title="获取索引信息"></a>获取索引信息</h4><ol><li><p><code>GET localhost:9200/shopping</code></p><p>获取索引shopping的相关信息。</p></li><li><p>查看所有索引</p><p><code>GET localhost:9200/_cat/indices?v</code></p></li></ol><h4 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h4><ol><li><code>DELETE localhost:9200/shopping</code></li></ol><h3 id="文档操作"><a href="#文档操作" class="headerlink" title="文档操作"></a>文档操作</h3><h4 id="创建文档"><a href="#创建文档" class="headerlink" title="创建文档"></a>创建文档</h4><ol><li><p>添加的数据格式为JSON格式。</p><p>指定索引，向ES服务器发送POST请求。这里不能使用PUT请求。</p><p>创建</p><p><code>http://localhost:9200/shopping/_doc</code></p><p>requestBody:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br><span class="hljs-attr">&quot;title&quot;</span>: <span class="hljs-string">&quot;小米手机&quot;</span>,<br>    <span class="hljs-attr">&quot;category&quot;</span>: <span class="hljs-string">&quot;小米&quot;</span>,<br>    <span class="hljs-attr">&quot;images&quot;</span>: <span class="hljs-string">&quot;http://www.gulixueyuan.com/xm.jpg&quot;</span>,<br>    <span class="hljs-attr">&quot;price&quot;</span>: <span class="hljs-number">3999.00</span><br>&#125;<br></code></pre></td></tr></table></figure><p>response</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>    <span class="hljs-attr">&quot;_index&quot;</span>: <span class="hljs-string">&quot;shopping&quot;</span>,<br>    <span class="hljs-attr">&quot;_type&quot;</span>: <span class="hljs-string">&quot;_doc&quot;</span>,<br>    <span class="hljs-attr">&quot;_id&quot;</span>: <span class="hljs-string">&quot;Xs9ZEoMBp69JQLv9Eto8&quot;</span>,<br>    <span class="hljs-attr">&quot;_version&quot;</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-attr">&quot;result&quot;</span>: <span class="hljs-string">&quot;created&quot;</span>,<br>    <span class="hljs-attr">&quot;_shards&quot;</span>: &#123;<br>        <span class="hljs-attr">&quot;total&quot;</span>: <span class="hljs-number">2</span>,<br>        <span class="hljs-attr">&quot;successful&quot;</span>: <span class="hljs-number">1</span>,<br>        <span class="hljs-attr">&quot;failed&quot;</span>: <span class="hljs-number">0</span><br>    &#125;,<br>    <span class="hljs-attr">&quot;_seq_no&quot;</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-attr">&quot;_primary_term&quot;</span>: <span class="hljs-number">1</span><br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到response中有一个字段是_id，这是由es随机生成的，也就意味着，每次发送请求，返回的结果都不一样，而PUT请求是幂等性的，多次发出请求，返回的结果一样，所以这里不能使用具有幂等性的PUT请求。</p><p>这个_id是数据的唯一性标识，类似于数据表中的主键。</p></li><li><p>创建文档–指定ID</p><p><code>POST/PUT localhost:9200/shopping/_doc/1001</code></p><p>这是一个幂等性的操作，所以用PUT请求也可以。    </p><p><code>POST/PUT localhost:9200/shopping/_create/1002</code></p></li></ol><h4 id="查询文档"><a href="#查询文档" class="headerlink" title="查询文档"></a>查询文档</h4><ol><li><p>根据ID进行单条数据查询</p><p><code>GET localhost:9200/shopping/_doc/1002</code></p><p>response</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>    <span class="hljs-attr">&quot;_index&quot;</span>: <span class="hljs-string">&quot;shopping&quot;</span>,<br>    <span class="hljs-attr">&quot;_type&quot;</span>: <span class="hljs-string">&quot;_doc&quot;</span>,<br>    <span class="hljs-attr">&quot;_id&quot;</span>: <span class="hljs-string">&quot;1002&quot;</span>,<br>    <span class="hljs-attr">&quot;_version&quot;</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-attr">&quot;_seq_no&quot;</span>: <span class="hljs-number">3</span>,<br>    <span class="hljs-attr">&quot;_primary_term&quot;</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-attr">&quot;found&quot;</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">&quot;_source&quot;</span>: &#123;<br>        <span class="hljs-attr">&quot;title&quot;</span>: <span class="hljs-string">&quot;小米手机&quot;</span>,<br>        <span class="hljs-attr">&quot;category&quot;</span>: <span class="hljs-string">&quot;小米&quot;</span>,<br>        <span class="hljs-attr">&quot;images&quot;</span>: <span class="hljs-string">&quot;http://www.gulixueyuan.com/xm.jpg&quot;</span>,<br>        <span class="hljs-attr">&quot;price&quot;</span>: <span class="hljs-number">3999.00</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>_source表示查询结果，也就是数据源，这种方式类似于主键查询。</p></li><li><p>查询指定索引下的所有数据</p><p><code>GET localhost:9200/shopping/_search</code></p><p>response</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>    <span class="hljs-attr">&quot;took&quot;</span>: <span class="hljs-number">8</span>,<br>    <span class="hljs-attr">&quot;timed_out&quot;</span>: <span class="hljs-literal">false</span>,<br>    <span class="hljs-attr">&quot;_shards&quot;</span>: &#123;<br>        <span class="hljs-attr">&quot;total&quot;</span>: <span class="hljs-number">1</span>,<br>        <span class="hljs-attr">&quot;successful&quot;</span>: <span class="hljs-number">1</span>,<br>        <span class="hljs-attr">&quot;skipped&quot;</span>: <span class="hljs-number">0</span>,<br>        <span class="hljs-attr">&quot;failed&quot;</span>: <span class="hljs-number">0</span><br>    &#125;,<br>    <span class="hljs-attr">&quot;hits&quot;</span>: &#123;<br>        <span class="hljs-attr">&quot;total&quot;</span>: &#123;<br>            <span class="hljs-attr">&quot;value&quot;</span>: <span class="hljs-number">4</span>,<br>            <span class="hljs-attr">&quot;relation&quot;</span>: <span class="hljs-string">&quot;eq&quot;</span><br>        &#125;,<br>        <span class="hljs-attr">&quot;max_score&quot;</span>: <span class="hljs-number">1.0</span>,<br>        <span class="hljs-attr">&quot;hits&quot;</span>: [<br>            &#123;<br>                <span class="hljs-attr">&quot;_index&quot;</span>: <span class="hljs-string">&quot;shopping&quot;</span>,<br>                <span class="hljs-attr">&quot;_type&quot;</span>: <span class="hljs-string">&quot;_doc&quot;</span>,<br>                <span class="hljs-attr">&quot;_id&quot;</span>: <span class="hljs-string">&quot;Xc9XEoMBp69JQLv9LNpW&quot;</span>,<br>                <span class="hljs-attr">&quot;_score&quot;</span>: <span class="hljs-number">1.0</span>,<br>                <span class="hljs-attr">&quot;_source&quot;</span>: &#123;<br>                    <span class="hljs-attr">&quot;title&quot;</span>: <span class="hljs-string">&quot;小米手机&quot;</span>,<br>                    <span class="hljs-attr">&quot;category&quot;</span>: <span class="hljs-string">&quot;小米&quot;</span>,<br>                    <span class="hljs-attr">&quot;images&quot;</span>: <span class="hljs-string">&quot;http://www.gulixueyuan.com/xm.jpg&quot;</span>,<br>                    <span class="hljs-attr">&quot;price&quot;</span>: <span class="hljs-number">3999.00</span><br>                &#125;<br>            &#125;,<br>            &#123;<br>                <span class="hljs-attr">&quot;_index&quot;</span>: <span class="hljs-string">&quot;shopping&quot;</span>,<br>                <span class="hljs-attr">&quot;_type&quot;</span>: <span class="hljs-string">&quot;_doc&quot;</span>,<br>                <span class="hljs-attr">&quot;_id&quot;</span>: <span class="hljs-string">&quot;Xs9ZEoMBp69JQLv9Eto8&quot;</span>,<br>                <span class="hljs-attr">&quot;_score&quot;</span>: <span class="hljs-number">1.0</span>,<br>                <span class="hljs-attr">&quot;_source&quot;</span>: &#123;<br>                    <span class="hljs-attr">&quot;title&quot;</span>: <span class="hljs-string">&quot;小米手机&quot;</span>,<br>                    <span class="hljs-attr">&quot;category&quot;</span>: <span class="hljs-string">&quot;小米&quot;</span>,<br>                    <span class="hljs-attr">&quot;images&quot;</span>: <span class="hljs-string">&quot;http://www.gulixueyuan.com/xm.jpg&quot;</span>,<br>                    <span class="hljs-attr">&quot;price&quot;</span>: <span class="hljs-number">3999.00</span><br>                &#125;<br>            &#125;,<br>            &#123;<br>                <span class="hljs-attr">&quot;_index&quot;</span>: <span class="hljs-string">&quot;shopping&quot;</span>,<br>                <span class="hljs-attr">&quot;_type&quot;</span>: <span class="hljs-string">&quot;_doc&quot;</span>,<br>                <span class="hljs-attr">&quot;_id&quot;</span>: <span class="hljs-string">&quot;1001&quot;</span>,<br>                <span class="hljs-attr">&quot;_score&quot;</span>: <span class="hljs-number">1.0</span>,<br>                <span class="hljs-attr">&quot;_source&quot;</span>: &#123;<br>                    <span class="hljs-attr">&quot;title&quot;</span>: <span class="hljs-string">&quot;小米手机&quot;</span>,<br>                    <span class="hljs-attr">&quot;category&quot;</span>: <span class="hljs-string">&quot;小米&quot;</span>,<br>                    <span class="hljs-attr">&quot;images&quot;</span>: <span class="hljs-string">&quot;http://www.gulixueyuan.com/xm.jpg&quot;</span>,<br>                    <span class="hljs-attr">&quot;price&quot;</span>: <span class="hljs-number">3999.00</span><br>                &#125;<br>            &#125;,<br>            &#123;<br>                <span class="hljs-attr">&quot;_index&quot;</span>: <span class="hljs-string">&quot;shopping&quot;</span>,<br>                <span class="hljs-attr">&quot;_type&quot;</span>: <span class="hljs-string">&quot;_doc&quot;</span>,<br>                <span class="hljs-attr">&quot;_id&quot;</span>: <span class="hljs-string">&quot;1002&quot;</span>,<br>                <span class="hljs-attr">&quot;_score&quot;</span>: <span class="hljs-number">1.0</span>,<br>                <span class="hljs-attr">&quot;_source&quot;</span>: &#123;<br>                    <span class="hljs-attr">&quot;title&quot;</span>: <span class="hljs-string">&quot;小米手机&quot;</span>,<br>                    <span class="hljs-attr">&quot;category&quot;</span>: <span class="hljs-string">&quot;小米&quot;</span>,<br>                    <span class="hljs-attr">&quot;images&quot;</span>: <span class="hljs-string">&quot;http://www.gulixueyuan.com/xm.jpg&quot;</span>,<br>                    <span class="hljs-attr">&quot;price&quot;</span>: <span class="hljs-number">3999.00</span><br>                &#125;<br>            &#125;<br>        ]<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h4 id="修改文档"><a href="#修改文档" class="headerlink" title="修改文档"></a>修改文档</h4><ol><li><p>根据id修改文档</p><p><code>PUT/POST localhost:9200/shopping/_doc/1001</code></p><p>requestBody</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br><span class="hljs-attr">&quot;title&quot;</span>: <span class="hljs-string">&quot;小米手机&quot;</span>,<br>    <span class="hljs-attr">&quot;category&quot;</span>: <span class="hljs-string">&quot;小米&quot;</span>,<br>    <span class="hljs-attr">&quot;images&quot;</span>: <span class="hljs-string">&quot;http://www.gulixueyuan.com/xm.jpg&quot;</span>,<br>    <span class="hljs-attr">&quot;price&quot;</span>: <span class="hljs-number">4000.00</span><br>&#125;<br></code></pre></td></tr></table></figure><p>response</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>    <span class="hljs-attr">&quot;_index&quot;</span>: <span class="hljs-string">&quot;shopping&quot;</span>,<br>    <span class="hljs-attr">&quot;_type&quot;</span>: <span class="hljs-string">&quot;_doc&quot;</span>,<br>    <span class="hljs-attr">&quot;_id&quot;</span>: <span class="hljs-string">&quot;1001&quot;</span>,<br>    <span class="hljs-attr">&quot;_version&quot;</span>: <span class="hljs-number">2</span>,<br>    <span class="hljs-attr">&quot;result&quot;</span>: <span class="hljs-string">&quot;updated&quot;</span>,<br>    <span class="hljs-attr">&quot;_shards&quot;</span>: &#123;<br>        <span class="hljs-attr">&quot;total&quot;</span>: <span class="hljs-number">2</span>,<br>        <span class="hljs-attr">&quot;successful&quot;</span>: <span class="hljs-number">1</span>,<br>        <span class="hljs-attr">&quot;failed&quot;</span>: <span class="hljs-number">0</span><br>    &#125;,<br>    <span class="hljs-attr">&quot;_seq_no&quot;</span>: <span class="hljs-number">5</span>,<br>    <span class="hljs-attr">&quot;_primary_term&quot;</span>: <span class="hljs-number">1</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>局部修改</p><p><code>POST localhost:9200/shopping/_update/1001</code></p><p>requestBody</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br><span class="hljs-attr">&quot;doc&quot;</span>: &#123;<br>        <span class="hljs-attr">&quot;title&quot;</span>: <span class="hljs-string">&quot;华为手机&quot;</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h4 id="删除文档"><a href="#删除文档" class="headerlink" title="删除文档"></a>删除文档</h4><ol><li><p>根据ID删除单个文档</p><p><code>DELETE localhost:9200/shopping/_doc/1001</code></p></li></ol><h3 id="查询操作"><a href="#查询操作" class="headerlink" title="查询操作"></a>查询操作</h3><h4 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h4><ol><li><p><code>GET localhost:9200/shopping/_search?q=category:小米</code></p></li><li><p>对以上的条件查询，会调整为根据请求体requestBody来传递参数</p><p><code>GET localhost:9200/shopping/_search</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br><span class="hljs-attr">&quot;query&quot;</span>: &#123;<br><span class="hljs-attr">&quot;match&quot;</span>: &#123;<br><span class="hljs-attr">&quot;category&quot;</span>: <span class="hljs-string">&quot;小米&quot;</span><br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>没有在地址栏上写查询的参数</p></li></ol><h4 id="全查询"><a href="#全查询" class="headerlink" title="全查询"></a>全查询</h4><p><code>GET localhost:9200/shopping/_search</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br><span class="hljs-attr">&quot;query&quot;</span>: &#123;<br><span class="hljs-attr">&quot;match_all&quot;</span>: &#123;<br><br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>等价于<code>GET localhost:9200/shopping/_search</code></p><p><strong>可以不带请求体！HTTP 1.1标准中没有规定GET方法是否可以有请求体，因此GET方法也可以带请求体，完全符合标准。elasticsearch中就是用GET方法的请求体传递搜索条件。为了兼容性考虑，elasticsearch也接受POST方法+请求体的搜索方式。</strong></p><p>不带请求体只适用于全查询，因为不需要给查询条件。</p><h4 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h4><p><code>GET localhost:9200/shopping/_search</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br><span class="hljs-attr">&quot;query&quot;</span>: &#123;<br><span class="hljs-attr">&quot;match_all&quot;</span>: &#123;<br><br>&#125;<br>&#125;,<br>    <span class="hljs-attr">&quot;from&quot;</span>: <span class="hljs-number">0</span>,<br>    <span class="hljs-attr">&quot;size&quot;</span>: <span class="hljs-number">2</span><br>&#125;<br></code></pre></td></tr></table></figure><p>from表示<strong>当前页数据的起始位置</strong></p><p>size表示<strong>当前页有多少条数据</strong></p><h4 id="返回指定字段"><a href="#返回指定字段" class="headerlink" title="返回指定字段"></a>返回指定字段</h4><p><code>GET localhost:9200/shopping/_search</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br><span class="hljs-attr">&quot;query&quot;</span>: &#123;<br><span class="hljs-attr">&quot;match_all&quot;</span>: &#123;<br><br>&#125;<br>&#125;,<br>    <span class="hljs-attr">&quot;from&quot;</span>: <span class="hljs-number">2</span>,<br>    <span class="hljs-attr">&quot;size&quot;</span>: <span class="hljs-number">2</span>,<br>    <span class="hljs-attr">&quot;_source&quot;</span>: [<span class="hljs-string">&quot;title&quot;</span>]<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="指定字段排序"><a href="#指定字段排序" class="headerlink" title="指定字段排序"></a>指定字段排序</h4><p><code>GET localhost:9200/shopping/_search</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br><span class="hljs-attr">&quot;query&quot;</span>: &#123;<br><span class="hljs-attr">&quot;match_all&quot;</span>: &#123;<br><br>&#125;<br>&#125;,<br>    <span class="hljs-attr">&quot;sort&quot;</span>: &#123;<br>        <span class="hljs-attr">&quot;price&quot;</span>: &#123;<br>            <span class="hljs-attr">&quot;order&quot;</span>: <span class="hljs-string">&quot;asc&quot;</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="多条件查询"><a href="#多条件查询" class="headerlink" title="多条件查询"></a>多条件查询</h4><ol><li><p>多个条件同时成立–AND</p><p>must用数组，表示多条件的意思</p><p><code>localhost:9200/shopping/_search</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br><span class="hljs-attr">&quot;query&quot;</span>: &#123;<br><span class="hljs-attr">&quot;bool&quot;</span>: &#123;<br><span class="hljs-attr">&quot;must&quot;</span>: [<br>                &#123;<br>                    <span class="hljs-attr">&quot;match&quot;</span>: &#123;<br>                    <span class="hljs-attr">&quot;category&quot;</span>: <span class="hljs-string">&quot;小米&quot;</span><br>                    &#125;<br>                &#125;<br>            ]<br>&#125;<br>&#125;,<br>    <span class="hljs-attr">&quot;sort&quot;</span>: &#123;<br>        <span class="hljs-attr">&quot;price&quot;</span>: &#123;<br>            <span class="hljs-attr">&quot;order&quot;</span>: <span class="hljs-string">&quot;asc&quot;</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>must就是and的意思，就是must后面的数组里面的条件要同时成立</p></li><li><p>OR</p><p>must改为了should</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>    <span class="hljs-attr">&quot;query&quot;</span>: &#123;<br>        <span class="hljs-attr">&quot;bool&quot;</span>: &#123;<br>            <span class="hljs-attr">&quot;should&quot;</span>: [<br>                &#123;<br>                    <span class="hljs-attr">&quot;match&quot;</span>: &#123;<br>                    <span class="hljs-attr">&quot;category&quot;</span>: <span class="hljs-string">&quot;小米&quot;</span><br>                    &#125;<br>                &#125;,<br>                 &#123;<br>                    <span class="hljs-attr">&quot;match&quot;</span>: &#123;<br>                    <span class="hljs-attr">&quot;category&quot;</span>: <span class="hljs-string">&quot;华为&quot;</span><br>                    &#125;<br>                &#125;<br>            ]<br>        &#125;<br>    &#125;,<br>    <span class="hljs-attr">&quot;sort&quot;</span>: &#123;<br>        <span class="hljs-attr">&quot;price&quot;</span>: &#123;<br>            <span class="hljs-attr">&quot;order&quot;</span>: <span class="hljs-string">&quot;asc&quot;</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h4 id="范围查询"><a href="#范围查询" class="headerlink" title="范围查询"></a>范围查询</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br><span class="hljs-attr">&quot;query&quot;</span>: &#123;<br><span class="hljs-attr">&quot;bool&quot;</span>: &#123;<br><span class="hljs-attr">&quot;should&quot;</span>: [&#123;<br><span class="hljs-attr">&quot;match&quot;</span>: &#123;<br><span class="hljs-attr">&quot;category&quot;</span>: <span class="hljs-string">&quot;小米&quot;</span><br>&#125;<br>&#125;,<br>&#123;<br><span class="hljs-attr">&quot;match&quot;</span>: &#123;<br><span class="hljs-attr">&quot;category&quot;</span>: <span class="hljs-string">&quot;华为&quot;</span><br>&#125;<br>&#125;<br>],<br><span class="hljs-attr">&quot;filter&quot;</span>: &#123;<br><span class="hljs-attr">&quot;range&quot;</span>: &#123;<br><span class="hljs-attr">&quot;price&quot;</span>: &#123;<br><span class="hljs-attr">&quot;gt&quot;</span>: <span class="hljs-number">3000</span><br>&#125;<br>&#125;<br>&#125;<br>&#125;<br>&#125;,<br><br><span class="hljs-attr">&quot;sort&quot;</span>: &#123;<br><span class="hljs-attr">&quot;price&quot;</span>: &#123;<br><span class="hljs-attr">&quot;order&quot;</span>: <span class="hljs-string">&quot;asc&quot;</span><br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="全文检索"><a href="#全文检索" class="headerlink" title="全文检索"></a>全文检索</h4><ol><li><p>完全匹配</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>    <span class="hljs-attr">&quot;query&quot;</span>: &#123;<br>        <span class="hljs-attr">&quot;match_phrase&quot;</span>: &#123;<br>            <span class="hljs-attr">&quot;category&quot;</span>: <span class="hljs-string">&quot;华为&quot;</span><br>        &#125;<br>            <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h4 id="高亮"><a href="#高亮" class="headerlink" title="高亮"></a>高亮</h4><ol><li><p>```json</p><div class="code-wrapper"><pre><code class="hljs">&#123;    &quot;query&quot;: &#123;        &quot;match_phrase&quot;: &#123;            &quot;category&quot;: &quot;小米&quot;        &#125;    &#125;,    &quot;highlight&quot;: &#123;        &quot;fields&quot;: &#123;            &quot;category&quot;: &#123;            &#125;        &#125;    &#125;&#125;</code></pre></div><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs clean"><br>#### 聚合操作<br><br><span class="hljs-number">1.</span> 按分组统计<br><br>   request<br><br>   ```json<br>       &#123;<br>           <span class="hljs-string">&quot;aggs&quot;</span>: &#123;<br>               <span class="hljs-string">&quot;price_group&quot;</span>: &#123;<br>                   <span class="hljs-string">&quot;terms&quot;</span>: &#123; <span class="hljs-comment">//分组</span><br>                       <span class="hljs-string">&quot;field&quot;</span>: <span class="hljs-string">&quot;price&quot;</span><br>                   &#125;<br>               &#125;<br>           &#125;<br>       &#125;<br></code></pre></td></tr></table></figure><p>response</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>    <span class="hljs-attr">&quot;took&quot;</span>: <span class="hljs-number">25</span>,<br>    <span class="hljs-attr">&quot;timed_out&quot;</span>: <span class="hljs-literal">false</span>,<br>    <span class="hljs-attr">&quot;_shards&quot;</span>: &#123;<br>        <span class="hljs-attr">&quot;total&quot;</span>: <span class="hljs-number">1</span>,<br>        <span class="hljs-attr">&quot;successful&quot;</span>: <span class="hljs-number">1</span>,<br>        <span class="hljs-attr">&quot;skipped&quot;</span>: <span class="hljs-number">0</span>,<br>        <span class="hljs-attr">&quot;failed&quot;</span>: <span class="hljs-number">0</span><br>    &#125;,<br>    <span class="hljs-attr">&quot;hits&quot;</span>: &#123;<br>        <span class="hljs-attr">&quot;total&quot;</span>: &#123;<br>            <span class="hljs-attr">&quot;value&quot;</span>: <span class="hljs-number">4</span>,<br>            <span class="hljs-attr">&quot;relation&quot;</span>: <span class="hljs-string">&quot;eq&quot;</span><br>        &#125;,<br>        <span class="hljs-attr">&quot;max_score&quot;</span>: <span class="hljs-number">1.0</span>,<br>        <span class="hljs-attr">&quot;hits&quot;</span>: [<br>            &#123;<br>                <span class="hljs-attr">&quot;_index&quot;</span>: <span class="hljs-string">&quot;shopping&quot;</span>,<br>                <span class="hljs-attr">&quot;_type&quot;</span>: <span class="hljs-string">&quot;_doc&quot;</span>,<br>                <span class="hljs-attr">&quot;_id&quot;</span>: <span class="hljs-string">&quot;Xc9XEoMBp69JQLv9LNpW&quot;</span>,<br>                <span class="hljs-attr">&quot;_score&quot;</span>: <span class="hljs-number">1.0</span>,<br>                <span class="hljs-attr">&quot;_source&quot;</span>: &#123;<br>                    <span class="hljs-attr">&quot;title&quot;</span>: <span class="hljs-string">&quot;小米手机&quot;</span>,<br>                    <span class="hljs-attr">&quot;category&quot;</span>: <span class="hljs-string">&quot;小米&quot;</span>,<br>                    <span class="hljs-attr">&quot;images&quot;</span>: <span class="hljs-string">&quot;http://www.gulixueyuan.com/xm.jpg&quot;</span>,<br>                    <span class="hljs-attr">&quot;price&quot;</span>: <span class="hljs-number">3999.00</span><br>                &#125;<br>            &#125;,<br>            &#123;<br>                <span class="hljs-attr">&quot;_index&quot;</span>: <span class="hljs-string">&quot;shopping&quot;</span>,<br>                <span class="hljs-attr">&quot;_type&quot;</span>: <span class="hljs-string">&quot;_doc&quot;</span>,<br>                <span class="hljs-attr">&quot;_id&quot;</span>: <span class="hljs-string">&quot;Xs9ZEoMBp69JQLv9Eto8&quot;</span>,<br>                <span class="hljs-attr">&quot;_score&quot;</span>: <span class="hljs-number">1.0</span>,<br>                <span class="hljs-attr">&quot;_source&quot;</span>: &#123;<br>                    <span class="hljs-attr">&quot;title&quot;</span>: <span class="hljs-string">&quot;小米手机&quot;</span>,<br>                    <span class="hljs-attr">&quot;category&quot;</span>: <span class="hljs-string">&quot;小米&quot;</span>,<br>                    <span class="hljs-attr">&quot;images&quot;</span>: <span class="hljs-string">&quot;http://www.gulixueyuan.com/xm.jpg&quot;</span>,<br>                    <span class="hljs-attr">&quot;price&quot;</span>: <span class="hljs-number">3999.00</span><br>                &#125;<br>            &#125;,<br>            &#123;<br>                <span class="hljs-attr">&quot;_index&quot;</span>: <span class="hljs-string">&quot;shopping&quot;</span>,<br>                <span class="hljs-attr">&quot;_type&quot;</span>: <span class="hljs-string">&quot;_doc&quot;</span>,<br>                <span class="hljs-attr">&quot;_id&quot;</span>: <span class="hljs-string">&quot;1002&quot;</span>,<br>                <span class="hljs-attr">&quot;_score&quot;</span>: <span class="hljs-number">1.0</span>,<br>                <span class="hljs-attr">&quot;_source&quot;</span>: &#123;<br>                    <span class="hljs-attr">&quot;title&quot;</span>: <span class="hljs-string">&quot;小米手机&quot;</span>,<br>                    <span class="hljs-attr">&quot;category&quot;</span>: <span class="hljs-string">&quot;小米&quot;</span>,<br>                    <span class="hljs-attr">&quot;images&quot;</span>: <span class="hljs-string">&quot;http://www.gulixueyuan.com/xm.jpg&quot;</span>,<br>                    <span class="hljs-attr">&quot;price&quot;</span>: <span class="hljs-number">3999.00</span><br>                &#125;<br>            &#125;,<br>            &#123;<br>                <span class="hljs-attr">&quot;_index&quot;</span>: <span class="hljs-string">&quot;shopping&quot;</span>,<br>                <span class="hljs-attr">&quot;_type&quot;</span>: <span class="hljs-string">&quot;_doc&quot;</span>,<br>                <span class="hljs-attr">&quot;_id&quot;</span>: <span class="hljs-string">&quot;1004&quot;</span>,<br>                <span class="hljs-attr">&quot;_score&quot;</span>: <span class="hljs-number">1.0</span>,<br>                <span class="hljs-attr">&quot;_source&quot;</span>: &#123;<br>                    <span class="hljs-attr">&quot;title&quot;</span>: <span class="hljs-string">&quot;小米手机&quot;</span>,<br>                    <span class="hljs-attr">&quot;category&quot;</span>: <span class="hljs-string">&quot;小米&quot;</span>,<br>                    <span class="hljs-attr">&quot;images&quot;</span>: <span class="hljs-string">&quot;http://www.gulixueyuan.com/xm.jpg&quot;</span>,<br>                    <span class="hljs-attr">&quot;price&quot;</span>: <span class="hljs-number">3999.00</span><br>                &#125;<br>            &#125;<br>        ]<br>    &#125;,<br>    <span class="hljs-attr">&quot;aggregations&quot;</span>: &#123;<br>        <span class="hljs-attr">&quot;price_group&quot;</span>: &#123;<br>            <span class="hljs-attr">&quot;doc_count_error_upper_bound&quot;</span>: <span class="hljs-number">0</span>,<br>            <span class="hljs-attr">&quot;sum_other_doc_count&quot;</span>: <span class="hljs-number">0</span>,<br>            <span class="hljs-attr">&quot;buckets&quot;</span>: [<br>                &#123;<br>                    <span class="hljs-attr">&quot;key&quot;</span>: <span class="hljs-number">3999.0</span>,<br>                    <span class="hljs-attr">&quot;doc_count&quot;</span>: <span class="hljs-number">4</span><br>                &#125;<br>            ]<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>计算某个字段的平均值</p><p>request</p><p>size 为0表示不要原始数据。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>    <span class="hljs-attr">&quot;aggs&quot;</span>: &#123;<br>        <span class="hljs-attr">&quot;price_avg&quot;</span>: &#123;<br>            <span class="hljs-attr">&quot;avg&quot;</span>: &#123;<br>                <span class="hljs-attr">&quot;field&quot;</span>: <span class="hljs-string">&quot;price&quot;</span><br>            &#125;<br>        &#125;<br>    &#125;,<br>    <span class="hljs-attr">&quot;size&quot;</span>:<span class="hljs-number">0</span><br>&#125;<br></code></pre></td></tr></table></figure><p>response</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>    <span class="hljs-attr">&quot;took&quot;</span>: <span class="hljs-number">14</span>,<br>    <span class="hljs-attr">&quot;timed_out&quot;</span>: <span class="hljs-literal">false</span>,<br>    <span class="hljs-attr">&quot;_shards&quot;</span>: &#123;<br>        <span class="hljs-attr">&quot;total&quot;</span>: <span class="hljs-number">1</span>,<br>        <span class="hljs-attr">&quot;successful&quot;</span>: <span class="hljs-number">1</span>,<br>        <span class="hljs-attr">&quot;skipped&quot;</span>: <span class="hljs-number">0</span>,<br>        <span class="hljs-attr">&quot;failed&quot;</span>: <span class="hljs-number">0</span><br>    &#125;,<br>    <span class="hljs-attr">&quot;hits&quot;</span>: &#123;<br>        <span class="hljs-attr">&quot;total&quot;</span>: &#123;<br>            <span class="hljs-attr">&quot;value&quot;</span>: <span class="hljs-number">4</span>,<br>            <span class="hljs-attr">&quot;relation&quot;</span>: <span class="hljs-string">&quot;eq&quot;</span><br>        &#125;,<br>        <span class="hljs-attr">&quot;max_score&quot;</span>: <span class="hljs-literal">null</span>,<br>        <span class="hljs-attr">&quot;hits&quot;</span>: []<br>    &#125;,<br>    <span class="hljs-attr">&quot;aggregations&quot;</span>: &#123;<br>        <span class="hljs-attr">&quot;price_avg&quot;</span>: &#123;<br>            <span class="hljs-attr">&quot;value&quot;</span>: <span class="hljs-number">3999.0</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="映射"><a href="#映射" class="headerlink" title="映射"></a>映射</h3><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><ol><li><strong>在MySQL中，字段类型、长度等信息都属于表的结构信息，在ES中，也有类似的概念，称之为映射mapping。</strong></li></ol><h4 id="创建mapping"><a href="#创建mapping" class="headerlink" title="创建mapping"></a>创建mapping</h4><ol><li><p><code>PUT localhost:9200/user/_mapping</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br><span class="hljs-attr">&quot;properties&quot;</span>: &#123;<br><span class="hljs-attr">&quot;name&quot;</span>: &#123;<br><span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span>, <span class="hljs-comment">//text意思是name的类型是文本，意味着可以分词</span><br><span class="hljs-attr">&quot;index&quot;</span>: <span class="hljs-literal">true</span> <span class="hljs-comment">//表示这个字段可以索引查询</span><br>&#125;,<br><span class="hljs-attr">&quot;sex&quot;</span>: &#123;<br><span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;keyword&quot;</span>, <span class="hljs-comment">//keyword表示不能分词，必须完整匹配</span><br><span class="hljs-attr">&quot;index&quot;</span>: <span class="hljs-literal">true</span> <span class="hljs-comment">//表示这个字段可以索引查询</span><br>&#125;,<br><span class="hljs-attr">&quot;tel&quot;</span>: &#123;<br><span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;keyword&quot;</span>, <span class="hljs-comment">//keyword表示不能分词，必须完整匹配</span><br><span class="hljs-attr">&quot;index&quot;</span>: <span class="hljs-literal">false</span> <span class="hljs-comment">//表示这个字段不可以索引查询</span><br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h4 id="查询mapping信息"><a href="#查询mapping信息" class="headerlink" title="查询mapping信息"></a>查询mapping信息</h4><ol><li><p><code>GET localhost:9200/user/_mapping</code></p><p>response</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>    <span class="hljs-attr">&quot;user&quot;</span>: &#123;<br>        <span class="hljs-attr">&quot;mappings&quot;</span>: &#123;<br>            <span class="hljs-attr">&quot;properties&quot;</span>: &#123;<br>                <span class="hljs-attr">&quot;name&quot;</span>: &#123;<br>                    <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;text&quot;</span><br>                &#125;,<br>                <span class="hljs-attr">&quot;sex&quot;</span>: &#123;<br>                    <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;keyword&quot;</span><br>                &#125;,<br>                <span class="hljs-attr">&quot;tel&quot;</span>: &#123;<br>                    <span class="hljs-attr">&quot;type&quot;</span>: <span class="hljs-string">&quot;keyword&quot;</span>,<br>                    <span class="hljs-attr">&quot;index&quot;</span>: <span class="hljs-literal">false</span><br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="四、JavaAPI"><a href="#四、JavaAPI" class="headerlink" title="四、JavaAPI"></a>四、JavaAPI</h2><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><ol><li><p>```pom</p><div class="code-wrapper"><pre><code class="hljs">&lt;dependencies&gt;    &lt;dependency&gt;        &lt;groupId&gt;junit&lt;/groupId&gt;        &lt;artifactId&gt;junit&lt;/artifactId&gt;        &lt;version&gt;4.11&lt;/version&gt;        &lt;scope&gt;test&lt;/scope&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.elasticsearch&lt;/groupId&gt;        &lt;artifactId&gt;elasticsearch&lt;/artifactId&gt;        &lt;version&gt;7.8.0&lt;/version&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.elasticsearch.client&lt;/groupId&gt;        &lt;artifactId&gt;elasticsearch-rest-high-level-client&lt;/artifactId&gt;        &lt;version&gt;7.8.0&lt;/version&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.apache.logging.log4j&lt;/groupId&gt;        &lt;artifactId&gt;log4j-api&lt;/artifactId&gt;        &lt;version&gt;2.8.2&lt;/version&gt;    &lt;/dependency&gt;&lt;/dependencies&gt;</code></pre></div><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><br><span class="hljs-number">2.</span> 在代码中创建ES客户端对象，连接ES服务，因为早期版本的客户端对象不再推荐使用，所以我们这里采用高级REST客户端对象。<br><br><span class="hljs-meta">### 客户端配置</span><br><br><span class="hljs-number">1.</span> 创建客户端，连接ES服务<br><br>   ```java<br>   <span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ESClientConfig</span> </span>&#123;<br>       <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> RestHighLevelClient getESClient() &#123;<br>           <span class="hljs-comment">//创建ES客户端</span><br>           RestClientBuilder restClientBuilder = RestClient.builder(<span class="hljs-keyword">new</span> <span class="hljs-type">HttpHost</span>(<span class="hljs-string">&quot;localhost&quot;</span>, <span class="hljs-number">9200</span>, <span class="hljs-string">&quot;http&quot;</span>));<br>           RestHighLevelClient esClient = <span class="hljs-keyword">new</span> <span class="hljs-type">RestHighLevelClient</span>(restClientBuilder);<br>           <span class="hljs-keyword">return</span> esClient;<br>       &#125;<br>   &#125;<br></code></pre></td></tr></table></figure></li><li><p>连接服务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">testConn</span><span class="hljs-params">()</span> </span>&#123;<br>    RestHighLevelClient esClient = ESClientConfig.getESClient();<br>    System.out.println(esClient);<br>    <span class="hljs-keyword">try</span> &#123;<br>        esClient.close();<br>    &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(e);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="索引操作-1"><a href="#索引操作-1" class="headerlink" title="索引操作"></a>索引操作</h3><h4 id="创建索引-1"><a href="#创建索引-1" class="headerlink" title="创建索引"></a>创建索引</h4><ol><li>```java<div class="code-wrapper"><pre><code class="hljs">public void createIndex() &#123;    RestHighLevelClient esClient = ESClientConfig.getESClient();    CreateIndexRequest createIndexRequest = new CreateIndexRequest(&quot;user&quot;);    try &#123;        CreateIndexResponse createIndexResponse = esClient.indices().create(createIndexRequest, RequestOptions.DEFAULT);        //打印响应状态        System.out.println(createIndexResponse.isAcknowledged());    &#125; catch (IOException e) &#123;        throw new RuntimeException(e);    &#125; finally &#123;        try &#123;            esClient.close();        &#125; catch (IOException e) &#123;            throw new RuntimeException(e);        &#125;    &#125;&#125;</code></pre></div><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><br>#### 查询索引<br><br><span class="hljs-number">1.</span> ```java<br>       public void get<span class="hljs-constructor">Index()</span> &#123;<br>           GetIndexRequest getIndexRequest = <span class="hljs-keyword">new</span> <span class="hljs-constructor">GetIndexRequest(<span class="hljs-string">&quot;user&quot;</span>)</span>;<br>           RestHighLevelClient esClient = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ESClientConfig</span>.</span></span>get<span class="hljs-constructor">ESClient()</span>;<br>           <span class="hljs-keyword">try</span> &#123;<br>               GetIndexResponse getIndexResponse = esClient.indices<span class="hljs-literal">()</span>.get(getIndexRequest, RequestOptions.DEFAULT);<br>               <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(getIndexResponse.get<span class="hljs-constructor">Aliases()</span>);<br>               <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(getIndexResponse.get<span class="hljs-constructor">Mappings()</span>);<br>               <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(getIndexResponse.get<span class="hljs-constructor">Settings()</span>);<br>           &#125; catch (IOException e) &#123;<br>               throw <span class="hljs-keyword">new</span> <span class="hljs-constructor">RuntimeException(<span class="hljs-params">e</span>)</span>;<br>           &#125;<br>           <span class="hljs-keyword">try</span> &#123;<br>               esClient.close<span class="hljs-literal">()</span>;<br>           &#125; catch (IOException e) &#123;<br>               throw <span class="hljs-keyword">new</span> <span class="hljs-constructor">RuntimeException(<span class="hljs-params">e</span>)</span>;<br>           &#125;<br>       &#125;<br></code></pre></td></tr></table></figure></li></ol><h4 id="删除索引-1"><a href="#删除索引-1" class="headerlink" title="删除索引"></a>删除索引</h4><ol><li>```java<div class="code-wrapper"><pre><code class="hljs">public void deleteIndex() &#123;    DeleteIndexRequest deleteIndexRequest = new DeleteIndexRequest(&quot;user&quot;);    RestHighLevelClient esClient = ESClientConfig.getESClient();    try &#123;        AcknowledgedResponse delete = esClient.indices().delete(deleteIndexRequest, RequestOptions.DEFAULT);        System.out.println(delete);    &#125; catch (IOException e) &#123;        throw new RuntimeException(e);    &#125;    try &#123;        esClient.close();    &#125; catch (IOException e) &#123;        throw new RuntimeException(e);    &#125;&#125;</code></pre></div><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><br>### 文档操作<br><br>#### 添加文档<br><br><span class="hljs-number">1.</span> ```java<br>       <span class="hljs-built_in">public</span> <span class="hljs-type">void</span> createDoc() throws IOException &#123;<br>           IndexRequest userIndexRequest = <span class="hljs-built_in">new</span> IndexRequest();<br>           userIndexRequest.<span class="hljs-keyword">index</span>(&quot;user&quot;).id(&quot;1001&quot;);<br>           <span class="hljs-keyword">User</span> <span class="hljs-keyword">user</span> = <span class="hljs-built_in">new</span> <span class="hljs-keyword">User</span>();<br>           <span class="hljs-keyword">user</span>.setName(&quot;zhangsan&quot;);<br>           <span class="hljs-keyword">user</span>.setAge(<span class="hljs-number">30</span>);<br>           <span class="hljs-keyword">user</span>.setSex(&quot;男&quot;);<br>           // ES提供RESTful API进行数据的操作，Java客户端同样需要提供<span class="hljs-type">json</span>格式的requestBody<br>           ObjectMapper mapper = <span class="hljs-built_in">new</span> ObjectMapper();<br>           String userJson = mapper.writeValueAsString(<span class="hljs-keyword">user</span>);<br>           userIndexRequest.source(userJson, XContentType.JSON);<br>           IndexResponse response = esClient.<span class="hljs-keyword">index</span>(userIndexRequest, RequestOptions.<span class="hljs-keyword">DEFAULT</span>);<br>           <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(response.getResult());<br>           esClient.<span class="hljs-keyword">close</span>();<br>       &#125;<br></code></pre></td></tr></table></figure></li></ol><h4 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h4><ol><li>```java<div class="code-wrapper"><pre><code class="hljs">public void updateDoc() throws IOException &#123;    UpdateRequest userUpdateRequest = new UpdateRequest();    userUpdateRequest.index(&quot;user&quot;).id(&quot;1001&quot;);    userUpdateRequest.doc(XContentType.JSON, &quot;sex&quot;, &quot;女&quot;);    UpdateResponse updateResponse = esClient.update(userUpdateRequest, RequestOptions.DEFAULT);    System.out.println(updateResponse.getResult());    esClient.close();&#125;</code></pre></div><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><br>#### 查询数据<br><br><span class="hljs-number">1.</span> ```java<br>       <span class="hljs-built_in">public</span> <span class="hljs-type">void</span> getDoc() throws IOException  &#123;<br>           GetRequest getRequest = <span class="hljs-built_in">new</span> GetRequest();<br>           getRequest.<span class="hljs-keyword">index</span>(&quot;user&quot;).id(&quot;1001&quot;);<br>           GetResponse response = esClient.<span class="hljs-keyword">get</span>(getRequest, RequestOptions.<span class="hljs-keyword">DEFAULT</span>);<br>           String res = response.getSourceAsString();<br>           ObjectMapper mapper = <span class="hljs-built_in">new</span> ObjectMapper();<br>           <span class="hljs-keyword">User</span> <span class="hljs-keyword">user</span> = mapper.readValue(res, <span class="hljs-keyword">User</span>.<span class="hljs-keyword">class</span>);<br>           <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(<span class="hljs-keyword">user</span>);<br>           esClient.<span class="hljs-keyword">close</span>();<br>       &#125;<br></code></pre></td></tr></table></figure></li></ol><h4 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h4><ol><li><p>```java</p><div class="code-wrapper"><pre><code class="hljs">public void deleteDoc() throws IOException &#123;    DeleteRequest deleteRequest = new DeleteRequest();    deleteRequest.index(&quot;user&quot;).id(&quot;1001&quot;);    DeleteResponse response = esClient.delete(deleteRequest, RequestOptions.DEFAULT);    System.out.println(response.toString());    esClient.close();&#125;</code></pre></div><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><br>### 批量文档操作<br><br>#### 批量插入<br><br><span class="hljs-number">1.</span> ```java<br>       <span class="hljs-built_in">public</span> <span class="hljs-type">void</span> bulkInsert() throws IOException &#123;<br>           BulkRequest bulkRequest = <span class="hljs-built_in">new</span> BulkRequest();<br>           ObjectMapper mapper = <span class="hljs-built_in">new</span> ObjectMapper();<br>           IndexRequest indexRequest = <span class="hljs-built_in">new</span> IndexRequest().<span class="hljs-keyword">index</span>(&quot;user&quot;).id(&quot;1001&quot;);<br>           <span class="hljs-keyword">User</span> <span class="hljs-keyword">user</span> = <span class="hljs-built_in">new</span> <span class="hljs-keyword">User</span>();<br>           <span class="hljs-keyword">user</span>.setName(&quot;zhangsan&quot;);<br>           <span class="hljs-keyword">user</span>.setAge(<span class="hljs-number">30</span>);<br>           <span class="hljs-keyword">user</span>.setSex(&quot;男&quot;);<br>           // ES提供RESTful API进行数据的操作，Java客户端同样需要提供<span class="hljs-type">json</span>格式的requestBody<br>           indexRequest.source(mapper.writeValueAsString(<span class="hljs-keyword">user</span>), XContentType.JSON);<br>           bulkRequest.<span class="hljs-keyword">add</span>(indexRequest);<br>   <br>           IndexRequest indexRequest2 = <span class="hljs-built_in">new</span> IndexRequest().<span class="hljs-keyword">index</span>(&quot;user&quot;).id(&quot;1002&quot;);<br>           <span class="hljs-keyword">user</span>.setName(&quot;lisi&quot;);<br>           <span class="hljs-keyword">user</span>.setAge(<span class="hljs-number">30</span>);<br>           <span class="hljs-keyword">user</span>.setSex(&quot;女&quot;);<br>           indexRequest2.source(mapper.writeValueAsString(<span class="hljs-keyword">user</span>), XContentType.JSON);<br>           bulkRequest.<span class="hljs-keyword">add</span>(indexRequest2);<br>           BulkResponse response = esClient.bulk(bulkRequest, RequestOptions.<span class="hljs-keyword">DEFAULT</span>);<br>           <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(response.getTook());<br>           <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(response.getItems());<br>           esClient.<span class="hljs-keyword">close</span>();<br>       &#125;<br></code></pre></td></tr></table></figure><p>把之前的indexRequest放进BulkRequest里。</p></li></ol><h4 id="批量删除"><a href="#批量删除" class="headerlink" title="批量删除"></a>批量删除</h4><ol><li>```java<div class="code-wrapper"><pre><code class="hljs">public void bulkDelete() throws IOException &#123;    BulkRequest bulkRequest = new BulkRequest();    bulkRequest.add(new DeleteRequest().index(&quot;user&quot;).id(&quot;1001&quot;));    bulkRequest.add(new DeleteRequest().index(&quot;user&quot;).id(&quot;1002&quot;));    BulkResponse response = esClient.bulk(bulkRequest, RequestOptions.DEFAULT);    System.out.println(response.getTook());    System.out.println(response.getItems());    esClient.close();&#125;</code></pre></div><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><br><br><br>### 条件查询<br><br>#### 查询所有数据<br><br><span class="hljs-number">1.</span> ```java<br>       public void doc<span class="hljs-constructor">Query()</span> throws IOException &#123;<br>           SearchRequest searchRequest = <span class="hljs-keyword">new</span> <span class="hljs-constructor">SearchRequest()</span>;<br>           searchRequest.indices(<span class="hljs-string">&quot;user&quot;</span>);<br>           <span class="hljs-comment">//构造查询条件</span><br>           SearchSourceBuilder sourceBuilder = <span class="hljs-keyword">new</span> <span class="hljs-constructor">SearchSourceBuilder()</span>.query(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">QueryBuilders</span>.</span></span><span class="hljs-keyword">match</span><span class="hljs-constructor">AllQuery()</span>);<br>           searchRequest.source(sourceBuilder);<br>           SearchResponse response = esClient.search(searchRequest, RequestOptions.DEFAULT);<br>           <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(response.get<span class="hljs-constructor">Hits()</span>.get<span class="hljs-constructor">TotalHits()</span>);<br>           <span class="hljs-keyword">for</span> (SearchHit hit : response.get<span class="hljs-constructor">Hits()</span>) &#123;<br>               <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(hit.get<span class="hljs-constructor">SourceAsString()</span>);<br>           &#125;<br>           esClient.close<span class="hljs-literal">()</span>;<br>       &#125;<br></code></pre></td></tr></table></figure></li></ol><h4 id="指定字段查询"><a href="#指定字段查询" class="headerlink" title="指定字段查询"></a>指定字段查询</h4><ol><li>```java<div class="code-wrapper"><pre><code class="hljs">public void docQuery1() throws IOException &#123;    SearchRequest searchRequest = new SearchRequest();    searchRequest.indices(&quot;user&quot;);    //构造查询条件    SearchSourceBuilder sourceBuilder = new SearchSourceBuilder().query(QueryBuilders.termQuery(&quot;name&quot;, &quot;lisi&quot;));    searchRequest.source(sourceBuilder);    SearchResponse response = esClient.search(searchRequest, RequestOptions.DEFAULT);    System.out.println(response.getHits().getTotalHits());    for (SearchHit hit : response.getHits()) &#123;        System.out.println(hit.getSourceAsString());    &#125;    esClient.close();&#125;</code></pre></div><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><br>#### 分页查询<br><br><span class="hljs-number">1.</span> ```java<br>       public void doc<span class="hljs-constructor">Query2()</span> throws IOException &#123;<br>           SearchRequest searchRequest = <span class="hljs-keyword">new</span> <span class="hljs-constructor">SearchRequest()</span>;<br>           searchRequest.indices(<span class="hljs-string">&quot;user&quot;</span>);<br>           <span class="hljs-comment">//构造查询条件</span><br>           SearchSourceBuilder sourceBuilder = <span class="hljs-keyword">new</span> <span class="hljs-constructor">SearchSourceBuilder()</span>.query(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">QueryBuilders</span>.</span></span><span class="hljs-keyword">match</span><span class="hljs-constructor">AllQuery()</span>);<br>           sourceBuilder.from(<span class="hljs-number">0</span>);<br>           sourceBuilder.size(<span class="hljs-number">1</span>);<br>           searchRequest.source(sourceBuilder);<br>           SearchResponse response = esClient.search(searchRequest, RequestOptions.DEFAULT);<br>           <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(response.get<span class="hljs-constructor">Hits()</span>.get<span class="hljs-constructor">TotalHits()</span>);<br>           <span class="hljs-keyword">for</span> (SearchHit hit : response.get<span class="hljs-constructor">Hits()</span>) &#123;<br>               <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(hit.get<span class="hljs-constructor">SourceAsString()</span>);<br>           &#125;<br>           esClient.close<span class="hljs-literal">()</span>;<br>       &#125;<br></code></pre></td></tr></table></figure></li></ol><h4 id="查询结果排序"><a href="#查询结果排序" class="headerlink" title="查询结果排序"></a>查询结果排序</h4><ol><li>```java<br>SearchSourceBuilder sourceBuilder = new SearchSourceBuilder().query(QueryBuilders.matchAllQuery());<br>sourceBuilder.sort(“age”, SortOrder.DESC);<figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><br>#### 返回指定字段<br><br><span class="hljs-number">1.</span> ```java<br>   SearchSourceBuilder sourceBuilder = <span class="hljs-keyword">new</span> <span class="hljs-constructor">SearchSourceBuilder()</span>.query(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">QueryBuilders</span>.</span></span><span class="hljs-keyword">match</span><span class="hljs-constructor">AllQuery()</span>);<br>   String<span class="hljs-literal">[]</span> excludes = &#123;&#125;;<br>   String<span class="hljs-literal">[]</span> includes = &#123;<span class="hljs-string">&quot;name&quot;</span>&#125;;<br>   sourceBuilder.fetch<span class="hljs-constructor">Source(<span class="hljs-params">includes</span>, <span class="hljs-params">excludes</span>)</span>;<br></code></pre></td></tr></table></figure></li></ol><h3 id="高级查询"><a href="#高级查询" class="headerlink" title="高级查询"></a>高级查询</h3><h4 id="组合查询"><a href="#组合查询" class="headerlink" title="组合查询"></a>组合查询</h4><ol><li>```java<div class="code-wrapper"><pre><code class="hljs">    BoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery();    boolQueryBuilder.must(QueryBuilders.matchQuery(&quot;name&quot;, &quot;zhangsan&quot;));    boolQueryBuilder.must(QueryBuilders.matchQuery(&quot;sex&quot;, &quot;男&quot;));    SearchSourceBuilder sourceBuilder = new SearchSourceBuilder().query(boolQueryBuilder);    searchRequest.source(sourceBuilder);</code></pre></div><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><br>#### 范围查询<br><br><span class="hljs-number">1.</span> ```java<br>           RangeQueryBuilder rangeQueryBuilder = QueryBuilders.rangeQuery(&quot;age&quot;);<br>           rangeQueryBuilder.gte(<span class="hljs-number">30</span>);<br>           rangeQueryBuilder.lte(<span class="hljs-number">40</span>);<br>           SearchSourceBuilder sourceBuilder = <span class="hljs-built_in">new</span> SearchSourceBuilder().query(rangeQueryBuilder);<br>           searchRequest.source(sourceBuilder);<br></code></pre></td></tr></table></figure></li></ol><h4 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h4><ol><li>```java<div class="code-wrapper"><pre><code class="hljs">    FuzzyQueryBuilder fuzzyQueryBuilder = QueryBuilders.fuzzyQuery(&quot;name&quot;, &quot;zhangsa&quot;).fuzziness(Fuzziness.ONE);    SearchSourceBuilder sourceBuilder = new SearchSourceBuilder().query(fuzzyQueryBuilder);    searchRequest.source(sourceBuilder);</code></pre></div><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><br>   fuzziness表示偏差的距离，即差几个字符能被查出来<br><br>#### 高亮查询<br><br><span class="hljs-number">1.</span> ```java<br>           SearchSourceBuilder sourceBuilder = <span class="hljs-keyword">new</span> <span class="hljs-constructor">SearchSourceBuilder()</span>;<br>           TermQueryBuilder termQueryBuilder = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">QueryBuilders</span>.</span></span>term<span class="hljs-constructor">Query(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;zhangsan&quot;</span>)</span>;<br>           sourceBuilder.query(termQueryBuilder);<br>           HighlightBuilder highlightBuilder = <span class="hljs-keyword">new</span> <span class="hljs-constructor">HighlightBuilder()</span>;<br>           highlightBuilder.field(<span class="hljs-string">&quot;name&quot;</span>);<br>           sourceBuilder.highlighter(highlightBuilder);<br>           searchRequest.source(sourceBuilder);<br></code></pre></td></tr></table></figure></li></ol><h4 id="聚合查询"><a href="#聚合查询" class="headerlink" title="聚合查询"></a>聚合查询</h4><ol><li>```java<div class="code-wrapper"><pre><code class="hljs">public void aggrQuery() throws IOException &#123;    SearchRequest searchRequest = new SearchRequest();    searchRequest.indices(&quot;user&quot;);    //构造查询条件    SearchSourceBuilder sourceBuilder = new SearchSourceBuilder();    //由于是聚合，这里使用的是AggregationBuilder。maxAge，    // age，也就是要在该字段中聚合出最大值    AggregationBuilder aggregationBuilder = AggregationBuilders.max(&quot;maxAge&quot;).field(&quot;age&quot;);    sourceBuilder.aggregation(aggregationBuilder);    searchRequest.source(sourceBuilder);    SearchResponse response = esClient.search(searchRequest, RequestOptions.DEFAULT);    System.out.println(response.getHits().getTotalHits());    for (SearchHit hit : response.getHits()) &#123;        System.out.println(hit.getSourceAsString());    &#125;    Max maxAge = response.getAggregations().get(&quot;maxAge&quot;);    System.out.println(maxAge.getType() + &quot;--&quot; + maxAge.getName() + &quot;:&quot; + maxAge.getValue());    esClient.close();&#125;</code></pre></div><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><br><br><br>#### 分组查询<br><br><span class="hljs-number">1.</span> ```java<br>       public void group<span class="hljs-constructor">Query()</span> throws IOException &#123;<br>           SearchRequest searchRequest = <span class="hljs-keyword">new</span> <span class="hljs-constructor">SearchRequest()</span>;<br>           searchRequest.indices(<span class="hljs-string">&quot;user&quot;</span>);<br>           <span class="hljs-comment">//构造查询条件</span><br>           SearchSourceBuilder sourceBuilder = <span class="hljs-keyword">new</span> <span class="hljs-constructor">SearchSourceBuilder()</span>;<br>           <span class="hljs-comment">// 分组</span><br>           AggregationBuilder aggregationBuilder = <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">AggregationBuilders</span>.</span></span>terms(<span class="hljs-string">&quot;ageGroup&quot;</span>).field(<span class="hljs-string">&quot;age&quot;</span>);<br>           sourceBuilder.aggregation(aggregationBuilder);<br>           searchRequest.source(sourceBuilder);<br>           SearchResponse response = esClient.search(searchRequest, RequestOptions.DEFAULT);<br>           <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(response.get<span class="hljs-constructor">Hits()</span>.get<span class="hljs-constructor">TotalHits()</span>);<br>           <span class="hljs-keyword">for</span> (SearchHit hit : response.get<span class="hljs-constructor">Hits()</span>) &#123;<br>               <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(hit.get<span class="hljs-constructor">SourceAsString()</span>);<br>           &#125;<br>           Terms terms = response.get<span class="hljs-constructor">Aggregations()</span>.get(<span class="hljs-string">&quot;ageGroup&quot;</span>);<br>           <span class="hljs-keyword">for</span> (Terms.Bucket b: terms.get<span class="hljs-constructor">Buckets()</span>) &#123;<br>               <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(b.get<span class="hljs-constructor">Key()</span> + <span class="hljs-string">&quot;:&quot;</span> + b.get<span class="hljs-constructor">DocCount()</span>);<br>           &#125;<br>           esClient.close<span class="hljs-literal">()</span>;<br>       &#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="五、ES环境"><a href="#五、ES环境" class="headerlink" title="五、ES环境"></a>五、ES环境</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><ol><li><p>单机的容量是有限的，为了避免出现单点故障，企业一般都是采用集群部署的方式。</p><p>生产环境中，一般都是运行再指定服务器集群中。</p></li><li><p>单机服务器问题：</p><ul><li>负载会过高</li><li>存储容量有限</li><li>无法实现高可用</li><li>并发处理能力有限</li></ul></li><li><p>集群是把多个节点当成整体提供服务，分布式可以认为是思想，集群是物理层面的，是多台服务器节点组成一个集群，对外提供服务。</p><p>一个个不同微服务就部署在这多个服务器节点上；同一个微服务项目，采用分布式部署的方式，避免单点故障。</p></li><li><p>配置服务器集群时，集群中节点数量大于等于2就可以认为是集群了。</p><p>一个集群就是多个服务器节点（在kafka中这个概念是broker），共同持有整个的数据，并一起提供索引和搜索功能。</p><p>一个elasticsearch集群有一个唯一的名字标识，整个名字默认就是“elasticsearch”，一个节点只能通过指定某个集群的名字，来加入这个集群。</p></li></ol><h3 id="节点"><a href="#节点" class="headerlink" title="节点"></a>节点</h3><ol><li><p>集群中包含很多服务器，一个节点就是其中的一个服务器，<strong>作为集群的一部分，它存储数据，参与集群的索引和搜索功能。</strong></p></li><li><p>一个节点也是由一个名字来标识的，默认情况下，这个名字是一个随机的漫威角色名字，这个名字会在启动的时候赋予节点。</p><p>这个名字对于管理工作来说很重要，因为在管理过程中，会去确定网络中的哪些服务器对应于ES集群中的哪些节点。</p><p>一个节点可以通过配置集群名称的方式来加入一个指定集群，默认情况下，每个节点都会被安排加入一个叫做“elasticsearch”的集群中。</p></li><li><p><strong>多个服务器节点就形成了一个服务器集群，但是是不是一个节点就是一个服务器，一个独立的电脑呢？不是的，一台服务器上也可以启动多个节点，模拟集群，但是生产环境是不会这么做的，因为集群的目的之一就是为了避免单点故障。</strong></p></li></ol><h3 id="WIN集群部署"><a href="#WIN集群部署" class="headerlink" title="WIN集群部署"></a>WIN集群部署</h3><h4 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h4><p>第一台</p><ol><li><p>配置集群</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># ---------------------------------- Cluster -----------------------------------</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Use a descriptive name for your cluster:</span><br><span class="hljs-comment">#</span><br><span class="hljs-attr">cluster.name:</span> <span class="hljs-string">my-application</span><br><span class="hljs-comment">#</span><br></code></pre></td></tr></table></figure><p>节点以集群名称作为标识来加入集群</p></li><li><p>配置节点</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># ------------------------------------ Node ------------------------------------</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Use a descriptive name for the node:</span><br><span class="hljs-comment">#</span><br><span class="hljs-attr">node.name:</span> <span class="hljs-string">node-1001</span><br><span class="hljs-attr">node.master:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">node.data:</span> <span class="hljs-literal">true</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Add custom attributes to the node:</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#node.attr.rack: r1</span><br><span class="hljs-comment">#</span><br></code></pre></td></tr></table></figure><p>配置节点名称，节点是否是master等</p></li><li><p>配置网络</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># ---------------------------------- Network -----------------------------------</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Set the bind address to a specific IP (IPv4 or IPv6):</span><br><span class="hljs-comment">#</span><br><span class="hljs-attr">network.host:</span> <span class="hljs-string">localhost</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Set a custom port for HTTP:</span><br><span class="hljs-comment">#</span><br><span class="hljs-attr">http.port:</span> <span class="hljs-number">1001</span><br><span class="hljs-attr">transport.tcp.port:</span> <span class="hljs-number">9301</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># For more information, consult the network module documentation.</span><br><span class="hljs-comment">#</span><br></code></pre></td></tr></table></figure></li><li><p>跨域配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># ---------------------------------- Various -----------------------------------</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Require explicit names when deleting indices:</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment">#action.destructive_requires_name: true</span><br><span class="hljs-attr">http.cors.enabled:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">http.cors.allow-origin:</span> <span class="hljs-string">&quot;*&quot;</span><br></code></pre></td></tr></table></figure></li></ol><p>第二台</p><ol><li><p>除了以上四点配置</p><p>增加discovery配置，<strong>要去发现集群的其他节点，建立连接！</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># --------------------------------- Discovery ----------------------------------</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># Pass an initial list of hosts to perform discovery when this node is started:</span><br><span class="hljs-comment"># The default list of hosts is [&quot;127.0.0.1&quot;, &quot;[::1]&quot;]</span><br><span class="hljs-comment">#</span><br><span class="hljs-attr">discovery.seed_hosts:</span> [<span class="hljs-string">&quot;localhost:9301&quot;</span>]<br><span class="hljs-attr">discovery.zen.fd.ping_timeout:</span> <span class="hljs-string">1m</span><br><span class="hljs-attr">discovery.zen.fd.ping_retries:</span> <span class="hljs-number">5</span><br></code></pre></td></tr></table></figure><p>localhost:9301是<strong>内部通信端口</strong>，前面配置的http.port: 1001是<strong>对外的http服务地址！！</strong></p></li></ol><h4 id="查询节点状态"><a href="#查询节点状态" class="headerlink" title="查询节点状态"></a>查询节点状态</h4><ol><li><p><code>GET http://localhost:1001/_cluster/health</code></p><p>响应：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br>    <span class="hljs-attr">&quot;cluster_name&quot;</span>: <span class="hljs-string">&quot;my-application&quot;</span>,<br>    <span class="hljs-attr">&quot;status&quot;</span>: <span class="hljs-string">&quot;green&quot;</span>,<br>    <span class="hljs-attr">&quot;timed_out&quot;</span>: <span class="hljs-literal">false</span>,<br>    <span class="hljs-attr">&quot;number_of_nodes&quot;</span>: <span class="hljs-number">3</span>,<br>    <span class="hljs-attr">&quot;number_of_data_nodes&quot;</span>: <span class="hljs-number">3</span>,<br>    <span class="hljs-attr">&quot;active_primary_shards&quot;</span>: <span class="hljs-number">0</span>,<br>    <span class="hljs-attr">&quot;active_shards&quot;</span>: <span class="hljs-number">0</span>,<br>    <span class="hljs-attr">&quot;relocating_shards&quot;</span>: <span class="hljs-number">0</span>,<br>    <span class="hljs-attr">&quot;initializing_shards&quot;</span>: <span class="hljs-number">0</span>,<br>    <span class="hljs-attr">&quot;unassigned_shards&quot;</span>: <span class="hljs-number">0</span>,<br>    <span class="hljs-attr">&quot;delayed_unassigned_shards&quot;</span>: <span class="hljs-number">0</span>,<br>    <span class="hljs-attr">&quot;number_of_pending_tasks&quot;</span>: <span class="hljs-number">2</span>,<br>    <span class="hljs-attr">&quot;number_of_in_flight_fetch&quot;</span>: <span class="hljs-number">0</span>,<br>    <span class="hljs-attr">&quot;task_max_waiting_in_queue_millis&quot;</span>: <span class="hljs-number">45286</span>,<br>    <span class="hljs-attr">&quot;active_shards_percent_as_number&quot;</span>: <span class="hljs-number">100.0</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h3 id="Linux单点部署"><a href="#Linux单点部署" class="headerlink" title="Linux单点部署"></a>Linux单点部署</h3><h4 id="修改配置-1"><a href="#修改配置-1" class="headerlink" title="修改配置"></a>修改配置</h4><ol><li><p>config目录下的elasticsearch.yml文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment">#集群名称、节点名称、对外地址和port</span><br><span class="hljs-attr">cluster.name:</span> <span class="hljs-string">elasticsearch</span><br><span class="hljs-attr">node.name:</span> <span class="hljs-string">node-1</span><br><span class="hljs-attr">network.host:</span> <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span><br><span class="hljs-attr">http.port:</span> <span class="hljs-number">9200</span><br><span class="hljs-attr">cluster.initial_master_nodes:</span> [<span class="hljs-string">&quot;node-1&quot;</span>] <span class="hljs-comment">#把当前机器当作主节点。</span><br></code></pre></td></tr></table></figure></li></ol><h3 id="Linux集群部署"><a href="#Linux集群部署" class="headerlink" title="Linux集群部署"></a>Linux集群部署</h3><h4 id="修改配置-2"><a href="#修改配置-2" class="headerlink" title="修改配置"></a>修改配置</h4><p>第一台</p><ol><li><p>config目录下的elasticsearch.yml文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># 集群名称</span><br><span class="hljs-attr">cluster.name:</span> <span class="hljs-string">cluster-es</span><br><span class="hljs-comment"># 节点名称，每个节点的名称不能重复</span><br><span class="hljs-attr">node.name:</span> <span class="hljs-string">node-1</span><br><span class="hljs-comment"># ip地址，每个节点的ip地址不能重复</span><br><span class="hljs-attr">network.host:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.15</span><span class="hljs-number">.214</span><br><span class="hljs-comment"># 该节点是不是有资格主节点</span><br><span class="hljs-attr">node.master:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">node.data:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">http.port:</span> <span class="hljs-number">9201</span><br><span class="hljs-attr">http.cors.allow-origin:</span> <span class="hljs-string">&quot;*&quot;</span><br><span class="hljs-attr">http.cors.enabled:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">http.max_content_length:</span> <span class="hljs-string">200mb</span><br><span class="hljs-comment"># es7.x之后新增的配置，初始化一个新的集群时需要此配置来选举master</span><br><span class="hljs-attr">cluster.initial_master_nodes:</span> [<span class="hljs-string">&quot;node-1&quot;</span>]<br><span class="hljs-comment"># 节点发现，内部通信端口</span><br><span class="hljs-attr">discovery.seed_hosts:</span> [<span class="hljs-string">&quot;192.168.15.214:9301&quot;</span>, <span class="hljs-string">&quot;192.168.15.214:9302&quot;</span>, <span class="hljs-string">&quot;192.168.15.214:9303&quot;</span>]<br><span class="hljs-attr">gateway.recover_after_nodes:</span> <span class="hljs-number">2</span><br><span class="hljs-attr">network.tcp.keep_alive:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">network.tcp.no_delay:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">transport.tcp.compress:</span> <span class="hljs-literal">true</span><br><span class="hljs-comment"># 集群内同时启动的数据任务个数，默认是2个</span><br><span class="hljs-attr">cluster.routing.allocation.cluster_concurrent_rebalance:</span> <span class="hljs-number">16</span><br><span class="hljs-comment"># 添加或删除节点及负载均衡时并发恢复的线程个数，默认4个</span><br><span class="hljs-attr">cluster.routing.allocation.node_concurrent_recoveries:</span> <span class="hljs-number">16</span><br><span class="hljs-comment"># 初始化数据恢复时，并发恢复线程的个数，默认4个</span><br><span class="hljs-attr">cluster.routing.allocation.node_initial_primaries_recoveries:</span> <span class="hljs-number">16</span><br></code></pre></td></tr></table></figure><p>其余两个服务器节点也按照此配置，要修改端口，节点名称等</p></li></ol><h2 id="六、ES进阶"><a href="#六、ES进阶" class="headerlink" title="六、ES进阶"></a>六、ES进阶</h2><h3 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h3><ol><li><p>索引（Index）</p><p>一个索引就是一个拥有几分相似特征的文档的集合，或者说数据集合，一个索引就对应于关系型数据库的<strong>一个数据库或者一个数据表</strong>，索引中的文档就是一条数据。</p><p>一个索引由一个名字来标识，必须全是小写字母，并且当我们对这个索引中的文档即数据进行CRUD时，都要用到这个名字。</p><p>能搜索的数据必须索引，这样的好处是提高查询速度。</p></li><li><p>类型（Type）</p><p>Type的概念原先可以理解为对应于关系型数据库的数据表，但是现在已经弃用这个概念了，因为索引能直接和数据关联，倒排索引也是Lucene这个全文检索引擎的特性，keyword索引能和文档关联起来，也就是数据，所以在索引和数据之间不应该再多一个概念。</p></li><li><p>文档（Document）</p><p>一个文档就是一条数据</p><p>在一个index（数据库）里能存储任意多的文档</p><p>一个文档为一条数据，也就是MySQL中的一行数据，一个表中有多行数据，而ES中，一个索引中有多条数据，所以表对应于索引。</p><p>表能和对象进行映射，在ES中，Index和对象进行映射，一个Index中的数据的字段结构都是相同的。 </p></li><li><p>分片（shards）</p><p>一个索引可以存储超过单个节点硬件限制的大量数据。ES提供了将<strong>索引划分成多份</strong>的能力，每一份索引就成为分片，shard。</p><p>当你创建<strong>一个索引</strong>的时候，你可以指定你想要的分片的数量。<strong>每一个分片放在不同的服务器节点上提供服务。</strong></p><p>至于一个分片怎样分布，它的文档怎样聚合和搜索请求，是完全由ES管理的，对用户透明，无需过分关心。</p></li><li><p>副本（Replicas）</p><p>在一个网络/云的环境里，失败随时都可能发生，在某个分片/节点由于故障处于离线状态，这种情况下有一个故障转移机制是非常有用的。ES允许你创建分片的一份或多份拷贝，这些拷贝叫做副本。</p><p>作用：</p><ul><li>提供了高可用性，副本分片从不与原主分片置于同一服务器节点。</li><li>提高吞吐量，因为搜索可以在所有的副本上并行运行。</li></ul></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Test</title>
    <link href="/2022/11/18/TESTHEXO/"/>
    <url>/2022/11/18/TESTHEXO/</url>
    
    <content type="html"><![CDATA[<h1 id="cpu-perf"><a href="#cpu-perf" class="headerlink" title="cpu_perf"></a>cpu_perf</h1><p>更改自PerfSpect_v1.1.2(<a href="https://github.com/intel/PerfSpect/tree/v1.1.2">GitHub - intel/PerfSpect at v1.1.2</a>)</p><p>cpu_perf是一个基于linux perf的系统性能采集工具，该工具针对英特尔微架构， 基于linux perf收集底层 PMU（性能监控单元）计数器。</p><h2 id="1-运行该工具的环境"><a href="#1-运行该工具的环境" class="headerlink" title="1. 运行该工具的环境"></a>1. 运行该工具的环境</h2><ul><li>Linux perf</li><li>golang 1.15+</li><li>root权限</li></ul><h2 id="2-简要介绍Linux-Perf"><a href="#2-简要介绍Linux-Perf" class="headerlink" title="2. 简要介绍Linux Perf"></a>2. 简要介绍Linux Perf</h2><h3 id="2-1-perf"><a href="#2-1-perf" class="headerlink" title="2.1 perf"></a>2.1 perf</h3><ul><li><p>perf是Linux kernel自带的系统性能优化工具。它基于事件采样原理，以性能事件为基础，支持针对处理器相关性能指标与操作系统相关性能指标的性能剖析，常用于性能瓶颈的查找与热点代码的定位。</p></li><li><p>通过perf，应用程序可以利用PMU，tracepoint和内核中的特殊计数器来进行性能统计。</p></li><li><p>使用perf可以分析程序运行期间发生的硬件事件，比如cache miss等；也可以分析软件事件，比如page fault和进程切换。</p></li><li><p>perf的常用参数有top、stat、record、list、report。本工具是基于perf stat命令编写。</p></li></ul><h3 id="2-2-perf-stat"><a href="#2-2-perf-stat" class="headerlink" title="2.2 perf stat"></a>2.2 perf stat</h3><p>分析系统/进程的整体性能概况，用于在运行指令时，监测并分析其统计结果，perf stat能完整统计应用整个生命周期的信息。</p><h4 id="2-2-1-perf-stat命令结构"><a href="#2-2-1-perf-stat命令结构" class="headerlink" title="2.2.1 perf stat命令结构"></a>2.2.1 perf stat命令结构</h4><figure class="highlight shell"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><pre><code class="hljs shell">perf stat [-e &lt;EVENT&gt; | --event=EVENT] [-a] &lt;command&gt;<br>perf stat [-e &lt;EVENT&gt; | --event=EVENT] [-a] — &lt;command&gt; [&lt;options&gt;]<br></code></pre></td></tr></table></figure><h4 id="2-2-2-perf-stat输出"><a href="#2-2-2-perf-stat输出" class="headerlink" title="2.2.2 perf stat输出"></a>2.2.2 perf stat输出</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@gpfs_node2 cpu_perf]# perf stat<br>^C<br> Performance counter stats for &#x27;system wide&#x27;:<br><br>        846,950.58 msec cpu-clock                 #   63.826 CPUs utilized<br>               488      context-switches          #    0.001 K/sec<br>                64      cpu-migrations            #    0.000 K/sec<br>               166      page-faults               #    0.000 K/sec<br>     5,603,235,575      cycles                    #    0.007 GHz<br>       211,817,161      instructions              #    0.04  insn per cycle<br>        48,733,180      branches                  #    0.058 M/sec<br>           216,018      branch-misses             #    0.44% of all branches<br><br>      13.269642058 seconds time elapsed<br></code></pre></td></tr></table></figure><p>可以看到是从整个系统的层次（system wide）来监测这些<code>性能指标（性能事件）</code>的。</p><ul><li><p><code>cpu-clock</code></p><p>表示任务真正占用处理器的时间，单位是毫秒，也就是任务执行时间。</p></li><li><p><code>context-switches</code></p><p>程序在运行过程中上下文切换的次数。</p></li><li><p><code>cpu-migrations</code> </p><p>是任务从一个处理器迁往另一个处理器的次数。</p><p>Linux为了维持多个处理器的负载均衡，在特定条件下会将某个任务从一个CPU迁移到另一个CPU。 CPU迁移和上下文切换：发生上下文切换不一定会发生CPU迁移，而发生CPU迁移时肯定会发生上下文切换。</p></li><li><p><code>page-faults</code></p><p>是内核发生缺页的次数。</p><p>当应用程序请求的页面尚未建立、请求的页面不在内存中，或者请求的页面虽然在内存中，但物理地址和虚拟地址的映射关系尚未建立时，都会触发一次缺页异常。另外TLB不命中，页面访问权限不匹配等情况也会触发缺页异常。</p></li><li><p><code>cycles</code></p><p>是程序消耗的处理器周期数。</p></li><li><p><code>instructions</code></p><p>是指命令执行期间产生的处理器指令数。</p></li><li><p><code>branches</code></p><p>是指程序在执行期间遇到的分支指令数。</p></li><li><p><code>branch-misses</code></p><p>预测错误的分支指令数。</p></li></ul><h4 id="2-2-3-perf-stat一些参数介绍"><a href="#2-2-3-perf-stat一些参数介绍" class="headerlink" title="2.2.3 perf stat一些参数介绍"></a>2.2.3 perf stat一些参数介绍</h4><ul><li><p><code>-e</code></p><p>选择要采集的性能事件。（可以是多个，用”,”分隔）。</p><p>用“perf list”指令可列出可采集的事件。</p></li><li><p><code>-I</code></p><p>每隔 N 毫秒打印一次计数器的变化，N 最小值为 100 毫秒。</p></li><li><p><code>-p</code></p><p>指定待分析的进程id即查看某个进程的性能统计。（可以是多个，用”,”分隔）</p></li><li><p><code>-o</code></p><p>输出统计信息到文件。</p></li><li><p><code>-a</code></p><p>指定全部cpu</p></li><li><p><code>-A</code></p><p>将给出每个处理器核心上的事件采集数据。</p></li><li><p><code>-G</code></p><p>对指定的cgroup进行性能数据采集。</p></li><li><p><code>sleep</code></p><p>采集sleep参数指定时间。</p></li></ul><h4 id="2-2-4-一些性能事件介绍"><a href="#2-2-4-一些性能事件介绍" class="headerlink" title="2.2.4 一些性能事件介绍"></a>2.2.4 一些性能事件介绍</h4><ul><li><p><code>alignment-faults：</code></p><p>统计内存对齐错误发生的次数， 当访问的非对齐的内存地址时，内核会进行处理，已保存不会发生问题，但会降低性能。</p></li><li><p><code>branches ：</code></p><p>这段时间内发生分支预测的次数。现代的CPU都有分支预测方面的优化。</p></li><li><p><code>branch-instructions：</code></p><p>分支预测成功次数。</p></li><li><p><code>branch-misses ：</code></p><p>这段时间内分支预测失败的次数，这个值越小越好。</p></li><li><p><code>cache-references：</code></p><p>cache命中次数。</p></li><li><p><code>cache-misses：</code></p><p>cache失效次数。</p></li><li><p><code>context-switches：</code></p><p>下文切换次数，前半部分是切换次数，后面是平均每秒发生次数（M是10的6次方）。</p></li><li><p><code>cpu-clock：</code></p><p>cpu clock的统计，每个cpu都有一个高精度定时器。</p></li><li><p><code>cpu-migrations：</code></p><p>进程运行过程中从一个cpu迁移到另一cpu的次数。</p></li><li><p><code>cpu-cycles：</code></p><p>统计cpu周期数，cpu周期：指一条指令的操作时间。。</p></li><li><p><code>cycles：</code></p><p>程序消耗的处理器周期数。</p></li><li><p><code>instructions：</code></p><p>执行的指令条数，insns per cycle: 即IPC，每个cpu周期执行的指令条数，IPC比上面的CPU使用率更能说明CPU的使用情况，（很多指令需要多个处理周期才能执行完毕），IPC越大越好，说明程序充分利用了处理器的特征。</p></li><li><p><code>L1-dcache-loads ：</code></p><p>一级数据缓存读取次数</p></li><li><p><code>L1-dcache-load-missed ：</code></p><p> 一级数据缓存读取失败次数</p></li><li><p><code>LLC-loads：</code></p><p>last level cache 读取次数</p></li><li><p><code>LLC-load-misses：</code></p><p>last level cache 读取失败次数</p></li><li><p><code>major-faults：</code></p></li><li><p>页错误，内存页已经被swap到硬盘上，需要I/O换回</p></li><li><p><code>minor-faults ：</code></p><p>页错误，内存页在物理内存中，只是没有和逻辑页进行映射</p></li><li><p><code>page-faults：</code></p><p>缺页异常的次数。当应用程序请求的页面尚未建立、请求的页面不在内存中，或者请求的页面虽然在内存中，但物理地址和虚拟地址的映射关系尚未建立时，都会触发一次缺页异常。另外TLB不命中，页面访问权限不匹配等情况也会触发缺页异常。</p></li><li><p><code>stalled-cycles-frontend和stalled-cycles-backend</code></p><p>表示CPU停滞统计。</p></li><li><p><code>task-clock ：</code></p><p>cpu clock中有task运行的统计</p></li><li><p><code>task-clock (msec):</code> </p><p>cpu处理task所消耗的时间，表示目标任务真正占用处理器的时间，单位ms，CPUs utilized表示cpu使用率， 该值越高代表程序是CPU bound（计算密集型）而非IO bound（I/O密集型）</p></li></ul><h2 id="3-cpu-perf介绍"><a href="#3-cpu-perf介绍" class="headerlink" title="3. cpu_perf介绍"></a>3. cpu_perf介绍</h2><h3 id="3-1-概述"><a href="#3-1-概述" class="headerlink" title="3.1 概述"></a>3.1 概述</h3><p>cpu_perf是一个基于linux perf的系统性能采集工具（CLI），该工具针对英特尔微架构， 基于linux perf收集底层 PMU（性能监控单元）计数器。</p><p>该项目基于perf stat命令的参数，设置了一些参数，能够指定所要采集的事件文件路径，采集时长，结果输出路径，设置采集周期等。</p><p>在3.4节有详细的命令介绍。</p><h3 id="3-2-项目目录"><a href="#3-2-项目目录" class="headerlink" title="3.2 项目目录"></a>3.2 项目目录</h3><table><thead><tr><th>文件/文件夹</th><th>说明</th><th>描述</th></tr></thead><tbody><tr><td>cgo_call</td><td>c文件，由项目通过cGo调用</td><td>里面存放的calibrate.c，用于计算TSC frequency</td></tr><tr><td>cmd</td><td>cmd包</td><td>把命令行定义相关的部分单独写在该包内，该包内的root.go，定义了命令执行的逻辑</td></tr><tr><td>common</td><td>common包</td><td>里面的go文件存放该项目要用到的常量信息</td></tr><tr><td>config</td><td>配置包</td><td>进行路径配置、日志配置、日志分割等</td></tr><tr><td>events</td><td>事件</td><td>存放了该工具所要采集的事件文件，在build时，会存放到相应路径下</td></tr><tr><td>perf_tools</td><td>perf工具类</td><td>perf采集数据需要调用的方法，如获得事件文件路径，准备事件文件等</td></tr><tr><td>utils</td><td>普通工具类</td><td>一些工具方法</td></tr><tr><td>build.sh</td><td>build脚本</td><td>将源码编译成二进制可执行文件；对事件文件和配置文件进行处理</td></tr><tr><td>cli.example</td><td>命令即参数描述</td><td>命令示例；参数用法</td></tr><tr><td>main.go</td><td>程序入口</td><td>使用cobra的项目，其程序入口main.go一般极为简洁(因为相应的业务逻辑都在cmd里调用或实现)</td></tr></tbody></table><h3 id="3-3-命令示例"><a href="#3-3-命令示例" class="headerlink" title="3.3 命令示例"></a>3.3 命令示例</h3><ul><li><p><code>(sudo) ./perf-collect (subCommand) -- Some options can be used only with root privileges</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs shell">[root@scm perfspect]# ./perf-collect [perfstat][basicinfo][runtime] -h<br>usage: perf-collect perfstat [-h] [-v] [-e EVENTFILE] [-i INTERVAL] [-m MUXINTERVAL]<br>                    [-o OUTCSV] [-a APP] [-p PID] [-c CGROUP] [-t TIMEOUT]<br>                    [--percore] [--nogroups] [--dryrun] [--metadata]<br>                    [-csp CLOUD] [-ct CLOUDTYPE]<br><br>perf-collect perfstat: Time series dump of PMUs<br>optional arguments:<br>  -h, --help            show this help message and exit<br>  -v, --version         display version info<br>  -e EVENTFILE, --eventfile EVENTFILE<br>                        Event file containing events to collect,<br>                        default=events/&lt;architecture specific file&gt;<br>  -i INTERVAL, --interval INTERVAL<br>                        interval in seconds for time series dump, default=1<br>  -m MUXINTERVAL, --muxinterval MUXINTERVAL<br>                        event mux interval in milli seconds, default=0 i.e.<br>                        will use the system default<br>  -o OUTCSV, --outcsv OUTCSV<br>                        perf stat output in csv format,<br>                        default=results/perfstat.csv<br>  -a APP, --app APP     Application to run with perf-collect, perf collection<br>                        ends after workload completion<br>  -p PID, --pid PID     perf-collect on selected PID(s)<br>  -c CGROUP, --cgroup CGROUP<br>                        perf-collect on selected cgroup(s)<br>  -t TIMEOUT, --timeout TIMEOUT<br>                        perf event collection time<br>  --percore             Enable per core event collection<br>  --nogroups            Disable perf event grouping, events are grouped by<br>                        default as in the event file<br>  --dryrun              Test if Performance Monitoring Counters are in-use,<br>                        and collect stats for 10sec to validate event file<br>                        correctness<br>  --metadata            collect system info only, does not run perf<br>  -csp CLOUD, --cloud CLOUD<br>                        Name of the Cloud Service Provider(AWS), if collecting<br>                        on cloud instances<br>  -ct CLOUDTYPE, --cloudtype CLOUDTYPE<br>                        Instance type: Options include - VM,BM<br>                        <br>                        <br>                        <br>perf-collect basicinfo: Collect CPU basic information at low frequency<br>optional arguments:<br>  -h, --help            show this help message and exit<br>  -v, --version         display version info<br>  -o OUTCSV, --outcsv   OUTCSV<br>                        basic information output in csv format,<br>                        default=results/basicinfo.csv<br><br><br>perf-collect runtime: collect some runtime information<br>optional arguments:<br>  -h, --help            show this help message and exit<br>  -v, --version         display version info<br>  -o OUTCSV, --outcsv   OUTCSV<br>                        runtime information output in csv format,<br>                        default=results/runtime.csv<br>  --cpufreq             collect cpu&#x27;s running frequency<br>  --turbostat           collect cpus&#x27;s turbo stat<br>  -t --timeout          specific the time to collect cpu&#x27;s turbostat<br></code></pre></td></tr></table></figure></li><li><p>示例：</p><p><code>sudo ./perf-collect perfstat -e xxx.txt -t 10 -i 2 --percore</code></p><p><code>sudo ./perf-collect basicinfo</code></p><p><code>sudo ./perf-collect runtime --cpufreq --turbostat -t 2</code></p></li></ul><h3 id="3-4-参数介绍"><a href="#3-4-参数介绍" class="headerlink" title="3.4 参数介绍"></a>3.4 参数介绍</h3><h4 id="3-4-1-perf-collect"><a href="#3-4-1-perf-collect" class="headerlink" title="3.4.1 perf-collect"></a>3.4.1 perf-collect</h4><table><thead><tr><th>子命令</th><th>说明</th></tr></thead><tbody><tr><td>perfstat</td><td>基于perf stat命令，收集底层PMU计数器</td></tr><tr><td>basicinfo</td><td>低频地收集cpu基础信息</td></tr><tr><td>runtime</td><td>高频收集cpu运行时数据，如cpu运行频率和turbostat</td></tr></tbody></table><h4 id="3-4-2-perf-collect-perfstat"><a href="#3-4-2-perf-collect-perfstat" class="headerlink" title="3.4.2 perf-collect perfstat"></a>3.4.2 perf-collect perfstat</h4><table><thead><tr><th align="left">参数名及简写</th><th>参数类型</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">-v/–version</td><td>bool</td><td align="left">打印此工具版本号</td></tr><tr><td align="left">-e/–eventfile</td><td>string</td><td align="left">指定要采集的CPU事件文件路径</td></tr><tr><td align="left">-i/–interval</td><td>float64</td><td align="left">每隔 N 毫秒打印一次计数器的变化，N 最小值为 100 毫秒</td></tr><tr><td align="left">-m/–  muxinterval</td><td>int</td><td align="left">为事件采集设置PMU多路复用的时间，在/sys/devices/uncore_imc_x/下能看到perf_event_mux_interval_ms文件，在此文件中能对mux interval进行查看和设置。此参数若等于0，则不重新设置；若大于0，且用户权限为root，则根据此参数的值重新设置mux interval。</td></tr><tr><td align="left">-o/–outcsv</td><td>string</td><td align="left">指定采集数据的存放文件路径</td></tr><tr><td align="left">-a/-app</td><td>string</td><td align="left">指定app，执行app的同时，执行perf stat采集执行此app的性能数据</td></tr><tr><td align="left">-p/-pid</td><td>string</td><td align="left">指定待分析的进程id，即采集该进程的性能数据</td></tr><tr><td align="left">-c/–cgroup</td><td>string</td><td align="left">对指定的cgroup的事件进行性能数据采集。</td></tr><tr><td align="left">-t/–timeout</td><td>int</td><td align="left">采集性能数据的时间</td></tr><tr><td align="left">–percore</td><td>bool</td><td align="left">将给出每个处理器核心上的事件采集数据</td></tr><tr><td align="left">–nogroups</td><td>bool</td><td align="left">禁用perf事件分组，事件默认通过event file分组</td></tr><tr><td align="left">–dryrun</td><td>bool</td><td align="left">该参数用于测试性能监控计数器是否正在使用，并收集 10 秒的统计信息以验证事件文件的正确性</td></tr><tr><td align="left">–metadata</td><td>bool</td><td align="left">只收集系统数据，不进行系统性能分析</td></tr></tbody></table><h4 id="3-4-3-perf-collect-basicinfo"><a href="#3-4-3-perf-collect-basicinfo" class="headerlink" title="3.4.3 perf-collect basicinfo"></a>3.4.3 perf-collect basicinfo</h4><table><thead><tr><th align="left">参数名及简写</th><th>参数类型</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">-v/–version</td><td>bool</td><td align="left">打印此工具版本号</td></tr><tr><td align="left">-o/–outcsv</td><td>string</td><td align="left">指定采集数据的存放文件路径</td></tr></tbody></table><h4 id="3-4-4-perf-collect-runtime"><a href="#3-4-4-perf-collect-runtime" class="headerlink" title="3.4.4 perf-collect runtime"></a>3.4.4 perf-collect runtime</h4><table><thead><tr><th align="left">参数名及简写</th><th>参数类型</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">-v/–version</td><td>bool</td><td align="left">打印此工具版本号</td></tr><tr><td align="left">-o/–outcsv</td><td>string</td><td align="left">指定采集数据的存放文件路径</td></tr><tr><td align="left">–cpufreq</td><td>bool</td><td align="left">指定是否采集cpu运行频率</td></tr><tr><td align="left">–turbostat</td><td>bool</td><td align="left">指定是否采集cpu turbostat</td></tr><tr><td align="left">-t/–timeout</td><td>int</td><td align="left">指定采集cpu turbostat的时间</td></tr></tbody></table><h2 id="4-编译、执行"><a href="#4-编译、执行" class="headerlink" title="4. 编译、执行"></a>4. 编译、执行</h2><h3 id="4-1-编译"><a href="#4-1-编译" class="headerlink" title="4.1 编译"></a>4.1 编译</h3><ul><li><p><code>./build.sh</code></p><p>如果成功编译，二进制可执行文件及事件文件、配置文件存放在perf_collect文件夹下。</p></li></ul><h3 id="4-2-可执行文件"><a href="#4-2-可执行文件" class="headerlink" title="4.2 可执行文件"></a>4.2 可执行文件</h3><blockquote><p>perf_collect/</p><ul><li>events———————————采集的事件文件</li><li>perf-collect————————–源码编译的二进制可执行文件，实现采集性能数据的核心功能</li></ul></blockquote><h3 id="4-3-执行"><a href="#4-3-执行" class="headerlink" title="4.3 执行"></a>4.3 执行</h3><p>一次完整的执行命令采集数据、输出结果、分析数据、得到结果的过程</p><ul><li><p>采集数据</p><p><code>./perf-collect perfstat -t 20 -i 2</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs log">time=&quot;2022-08-19T11:44:01+08:00&quot; level=warning msg=&quot;Warning: didn&#x27;t set the perf event mux interval&quot;<br>time=&quot;2022-08-19T11:44:02+08:00&quot; level=info msg=&quot;Collecting perf stat for events in : /tmp/cy/cpu_perf/cpu_perf_exec/events/skx.txt&quot;<br>time=&quot;2022-08-19T11:44:28+08:00&quot; level=info msg=&quot;Collection completed! Calculating TSC frequency now&quot;<br>time=&quot;2022-08-19T11:44:29+08:00&quot; level=info msg=&quot;# started on Fri Aug 19 11:44:08 2022&quot;<br>time=&quot;2022-08-19T11:44:29+08:00&quot; level=info msg=&quot;perf stat dumped to: /tmp/cy/cpu_perf/cpu_perf_exec/results/perfstat.csv&quot;<br></code></pre></td></tr></table></figure></li><li><p>输出结果和日志</p><blockquote><p>perf_collect/</p><ul><li>log<ul><li>cpu_perf_20220819.log</li><li>cpu_perf.log -&gt; cpu_perf_20220819.log</li></ul></li><li>results<ul><li><strong>perfstat.csv</strong></li></ul></li></ul></blockquote></li><li><p>分析数据</p><p>用分析工具分析上一步得到的perfstat.csv</p></li></ul><h2 id="5-注意"><a href="#5-注意" class="headerlink" title="5. 注意"></a>5. 注意</h2><ul><li><p>该工具只是工作在采集端，采集出的perfstat.csv文件需要通过性能分析工具进行分析，并将数据写入指定路径。</p><p><a href="https://github.com/intel/PerfSpect/releases/tag/v1.1.2">性能分析工具</a></p></li><li><p>该工具只能收集底层 linux perf 版本支持的计数器。当前版本仅支持 Intel Icelake、Cascadelake、Skylake 和 Broadwell 微架构。</p></li><li><p>性能收集开销将随着计数器数量和/或转储间隔的增加而增加。使用正确的 perf 多路复用（查看3.4参数注释或源码注释了解更多详细信息）间隔以减少开销。</p></li></ul><h2 id="6-代码"><a href="#6-代码" class="headerlink" title="6. 代码"></a>6. 代码</h2><p>Cobra 是一个 Golang 包，它提供了简单的接口来创建命令行程序。本项目通过cobra来构建了一个命令行程序。</p><p>代码结构逻辑分为以下部分：</p><ol><li><p>声明命令行参数变量</p></li><li><p>对这些参数依次进行处理，对每个参数进行判断并执行对应逻辑。</p></li><li><p>定义需要调用的perf指令的command</p></li><li><p>执行指令，将采集数据写入目标文件。</p></li><li><p>写metadata（cpu信息）到outcsv文件。</p></li></ol><p>详细信息见源码注释。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/11/18/hello-world/"/>
    <url>/2022/11/18/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start-Test"><a href="#Quick-Start-Test" class="headerlink" title="Quick Start Test"></a>Quick Start Test</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
